    #     wholetext=paste(wholetext, df[j,1], "[",df[j,2],"]{.round-dots} ",j,". (",VerbalBase,")", df[j,3])
    wholetext=paste(wholetext, df[j,1], "[",df[j,2],"]{.round-dots} ",j,VerbalBase, df[j,3])
    wholecorrectedtext=paste(wholecorrectedtext, df[j,1], "[",df[j,2],"]{.corrected}", df[j,3])
  }
  wholetext=unlist(strsplit(gsub("(\\?|\\. |\\.$|!)", "\\1~~", wholetext),"~~"))
wholetext
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/911-conjugation-demo.csv", "conjugation3")
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
    df=addheader(df, exerciseFound)
df
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/911-conjugation-demo.csv", "conjugation3")
df
df
str(df)
which(colnames(df)=="BOX")
returnrevealjsBox(df)
NvimR.function()
NvimR.function()
returnrevealjsBox(df)
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
df
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
    df=addheader(df, exerciseFound)
df
    df = returnCleanDF(df)
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
df
path="/home/adrien/github/UniversalDispatchR/pdfdata/913-article-demo.csv"
    df = read.csv(path,sep=';', check.names = F, header = F)
df
str(df)
grep("my_category",df)
readLines(df)
readLines(path)
df
?readLines
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/913-article-demo.csv", "article")
  article=readLines(path)
grepl("my_title:",article)
grepl("title:",article)
grepl("^title:",article)
which(grepl("^title:",article))
    wholetext=paste0(wholetext, df[j,1], "[",df[j,2],"]{.blankbox} ","`(",j,". ",VerbalBase,")`", df[j,3])
wholetext
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/911-conjugation-demo.csv", "conjugation3")
j
j=1
    wholetext=paste0(wholetext, df[j,1], "[",df[j,2],"]{.blankbox} ","`(",j,". ",VerbalBase,")`", df[j,3])
wholetext
  wholetext=c()
  wholecorrectedtext=c()
  for (j in 1:nrow(df)){
    VerbalBase=retrieveVerbalBase(df[j,2])
    #     wholetext=paste(wholetext, df[j,1], "[",df[j,2],"]{.blankbox} ",j,". (",VerbalBase,")", df[j,3])
    wholetext=paste0(wholetext, df[j,1], "[",df[j,2],"]{.blankbox} ","`(",j,". ",VerbalBase,")`", df[j,3])
    wholecorrectedtext=paste(wholecorrectedtext, df[j,1], "[",df[j,2],"]{.corrected}", df[j,3])
  }
  wholetext=unlist(strsplit(gsub("(\\?|\\. |\\.$|!)", "\\1~~", wholetext),"~~"))
wholetext
cat("go **test** hello")
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "engtoipa")
df
  df$STRESS=sapply(df[,1], function (x) getstress(x))
  df
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "engtoipa")
df
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
    df=addheader(df, exerciseFound)
df
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "engtoipa")
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
  n=1:nrow(df)
  d = split(n, ceiling(n/5))
  for (j in 1:length(d)){
    tmpdf=as.data.frame(df[d[[j]],]) 
    cat(":::: {.columns}\n")
    cat("::: {.column width=\"50%\"}\n")
    for (k in 1:nrow(tmpdf)){
      cat("* ", tmpdf[k,1],"\n")
    }
    cat(":::\n")
    cat("::: {.column width=\"50%\"}\n")
    cat("::: incremental\n")
    cat("::: {.corrected}\n")
    for (k in 1:nrow(tmpdf)){
      cat("* ", tmpdf[k,2],"\n")
    }
    cat(":::\n")
    cat(":::\n")
    cat(":::\n")
    cat("::::\n")
  }
      cat("::: {.fragment fragment-index=",k,"}\n\n")
k
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "ipaqcm")
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "ipaqcm")
output="latex"
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "ipaqcm")
GlobalOutput
GlobalOutput="latex"
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/914-phono-demo.csv", "ipaqcm")
df
  tmpdf=t(as.data.frame(sapply(df[,1], returnRandomPronunciations)))
  df$LPD=sapply(df[,1],getlpd)
  df=cbind(df,tmpdf)
  tmpsol=c()
  for (j in 1:nrow(df)){
    tmpsol[j]=which(df[j,3:6]==df[j,2])
  }
  df$SOL=tmpsol
  df=df[,-2]
  rm(tmpdf)
  df
df
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
    df=addheader(df, exerciseFound)
df
df
df
    df = returnCleanDF(df)
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
df
df
df
dforig=df
  firstRow=sapply(df[1,], tolower)
  isHeader=grep("header", firstRow)
  isHeader=ifelse(length(isHeader)>0,TRUE,FALSE)
  if (isHeader){
    # is there going to be a toolbox?
    # then duplicate the column where the box must be
    # so that the toolbox is not affected by "..."
    isBox=grepl("box", df[1,])
    idxBox=which(isBox==T)
    if (any(idxBox)){df$BOX=df[,idxBox];df$BOX=gsub("\\.\\.\\.","",df$BOX)}
    # // -> for conversion to via LPD IPA
    isColumnLPD=grepl("/",df[1,])
    df[-1,isColumnLPD]=sapply(df[-1,isColumnLPD], function (x) gsub("^(.*)$","/\\1/", x))
    # [] -> for conversion to IPA
    isColumnIPA=grepl("\\[|\\]",df[1,])
    df[-1,isColumnIPA]=sapply(df[-1,isColumnIPA], function (x) gsub("^(.*)$","[\\1]", x))
    # ... -> for dotfills
    isColumnDOT=grepl("\\.\\.\\.", df[1,])
    df[-1,isColumnDOT]=sapply(df[-1,isColumnDOT], function (x) gsub("^(.*)$","...\\1", x))
    df[1,]=sapply(df[1,], function (x) gsub("\\[|\\{|\\]|\\}|\\.\\.\\.","",x))
    # _xx_ -> for italics
    isColumnItalics=grepl(" _|_ ",df[1,])
    df[-1,isColumnItalics]=sapply(df[-1,isColumnItalics], function (x) gsub("^(.*)$","_\\1_", x))
    # __xx__ -> for bold
    isColumnBold=grepl(" _|_ ",df[1,])
    df[-1,isColumnBold]=sapply(df[-1,isColumnBold], function (x) gsub("^(.*)$","__\\1__", x))
    # mostly tables need to keep their headers
    #     cleanHeader=gsub("[^[:alnum:]]|(\\(.*\\))|box|header|NA", "\\1", df[1,])
    cleanHeader=gsub("box|header|NA", "", df[1,])
    #     testheader=gsub("header|NA ","", test)
    if(!any(grepl("[[:alpha:]]",cleanHeader))){
      #       print("yo")
      df=df[-1,]
    }
  }
df
  if (GlobalOutput=="html" | GlobalOutput=="revealjs"){
    tmpdf=apply(as.data.frame(df),c(1,2),returnCleanCellHTML)
  } else {
    tmpdf=apply(as.data.frame(df),c(1,2),returnCleanCell)
  }
tmpdf
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv")
path="/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv"
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
df
    df = returnCleanDF(df)
df
  do.call(sprintf("create%s%s",GlobalOutput, exerciseFound),list(toCall))
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv")
GlobalOutput
df
createlatexduolingo(df)
  cat(paste0( "\\begin{enumerate}"), "\\setlength\\itemsep{0.5cm}",sep="\n")
  for (j in 1:nrow(df)){
    jumbledwords=as.character(df[j,ncol(df)])
    jumbledwords=createJumbledStringWithDistractors(jumbledwords)
    cat(paste("\\item \\begin{minipage}[t]{\\linewidth}\n\n"))
    # if sentence to translate
    if (ncol(df)>2){
      cat(df[j,1], "\n\n")
    }
    for (n in 1:length(jumbledwords)){
      cat("\\Ovalbox{", jumbledwords[n], "}\\quad")
    }
    cat(paste("\n\n", df[j,(ncol(df)-1)],"\n\n"))
    cat(paste("\\end{minipage}\n\n"))
  }
      cat("\\Ovalbox{", jumbledwords[n], "}\\quad")
  for (j in 1:nrow(df)){
    jumbledwords=as.character(df[j,ncol(df)])
    jumbledwords=createJumbledStringWithDistractors(jumbledwords)
    cat(paste("\\item \\begin{minipage}[t]{\\linewidth}\n\n"))
    # if sentence to translate
    if (ncol(df)>2){
      cat(df[j,1], "\n\n")
    }
    for (n in 1:length(jumbledwords)){
      cat("\\Ovalbox{", jumbledwords[n], "}\\quad")
    }
    cat(paste("\n\n", df[j,(ncol(df)-1)],"\n\n"))
    cat(paste("\\end{minipage}\n\n"))
  }
    cat(paste("\n\n", df[j,(ncol(df)-1)],"\n\n"))
j
j=3
    for (n in 1:length(jumbledwords)){
      cat("\\Ovalbox{", jumbledwords[n], "}\\quad")
    }
jumbledwords
df
df
    df = read.csv(path,sep=';', check.names = F, header = F)
df
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
    df=addheader(df, exerciseFound)
df
    df = returnCleanDF(df)
df
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
  firstRow=sapply(df[1,], tolower)
  isHeader=grep("header", firstRow)
  isHeader=ifelse(length(isHeader)>0,TRUE,FALSE)
  if (isHeader){
    # is there going to be a toolbox?
    # then duplicate the column where the box must be
    # so that the toolbox is not affected by "..."
    isBox=grepl("box", df[1,])
    idxBox=which(isBox==T)
    if (any(idxBox)){df$BOX=df[,idxBox];df$BOX=gsub("\\.\\.\\.","",df$BOX)}
    # // -> for conversion to via LPD IPA
    isColumnLPD=grepl("/",df[1,])
    df[-1,isColumnLPD]=sapply(df[-1,isColumnLPD], function (x) gsub("^(.*)$","/\\1/", x))
    # [] -> for conversion to IPA
    isColumnIPA=grepl("\\[|\\]",df[1,])
    df[-1,isColumnIPA]=sapply(df[-1,isColumnIPA], function (x) gsub("^(.*)$","[\\1]", x))
    # ... -> for dotfills
    isColumnDOT=grepl("\\.\\.\\.", df[1,])
    df[-1,isColumnDOT]=sapply(df[-1,isColumnDOT], function (x) gsub("^(.*)$","...\\1", x))
    df[1,]=sapply(df[1,], function (x) gsub("\\[|\\{|\\]|\\}|\\.\\.\\.","",x))
    # _xx_ -> for italics
    isColumnItalics=grepl(" _|_ ",df[1,])
    df[-1,isColumnItalics]=sapply(df[-1,isColumnItalics], function (x) gsub("^(.*)$","_\\1_", x))
    # __xx__ -> for bold
    isColumnBold=grepl(" _|_ ",df[1,])
    df[-1,isColumnBold]=sapply(df[-1,isColumnBold], function (x) gsub("^(.*)$","__\\1__", x))
    # mostly tables need to keep their headers
    #     cleanHeader=gsub("[^[:alnum:]]|(\\(.*\\))|box|header|NA", "\\1", df[1,])
    cleanHeader=gsub("box|header|NA", "", df[1,])
    #     testheader=gsub("header|NA ","", test)
    if(!any(grepl("[[:alpha:]]",cleanHeader))){
      #       print("yo")
      df=df[-1,]
    }
  }
df
    tmpdf=apply(as.data.frame(df),c(1,2),returnCleanCell)
tmpdf
df
string=df[1,]
string=as.data.frame(df[1,])
df
string=as.data.frame(df)[1,]
string
  string=gsub("%", "\\\\%", string)
  string=gsub("&", "\\\\&", string)
  string=gsub("\\$", "\\\\$", string)
  string=detectMarkDown(string)
  isDotfill=ifelse(grepl("\\.\\.\\.", string), TRUE,FALSE)
  string=gsub("\\.\\.\\.","",string)
  isLPD=grep("/",string)
  isLPD=ifelse(length(isLPD)>0,TRUE,FALSE)
  if (isLPD) {
    substring=unlist(strsplit(string,"/"))
    substring1=substring[1]
    substring2=getlpd(substring[2])
    substring3=ifelse(length(substring)>2,substring[3],"")
    string=sprintf("%s %s %s",substring1,substring2,substring3)
  }
  isIPA=grepl("\\[|\\]",string)
  if (isIPA) {
    substring1=gsub("(.*)\\[(.*)\\](.*)","\\1",string)
    substring2=gsub("(.*)\\[(.*)\\](.*)","\\2",string)
    substring3=gsub("(.*)\\[(.*)\\](.*)","\\3",string)
    substring2=returnunicodestring(substring2)
    #     string=gsub("\\[|\\]","",string)
    string=sprintf("%s %s %s",substring1,substring2,substring3)
    #     string=returnunicodestring(string)
  }
  string=gsub("XXX", "\\\\makebox[1cm]{\\\\tiny\\\\dotfill}",string)
  string=gsub("___", "\\\\makebox[1cm]{\\\\tiny\\\\dotfill}",string)
  return=string
  if (isDotfill & !correction){
    # let's return a number of lines based on original string length
    width=round(length(unlist(strsplit(return,"")))/35)
    if (width==0){width=1}
    #     dotfill="{\\tiny\\dotfill}\n\n"
    dotfill="{\\tiny\\dotfill}"
    return=paste(rep(dotfill,width),collapse="")
  }
  return
source('/home/adrien/core/scripts/r/AllFunctions.R')
path="/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv"
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv")
df
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
df
df
    df = returnCleanDF(df)
df
string
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
    df = returnCleanDF(df)
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
    df=addheader(df, exerciseFound)
  firstRow=sapply(df[1,], tolower)
  isHeader=grep("header", firstRow)
  isHeader=ifelse(length(isHeader)>0,TRUE,FALSE)
  if (isHeader){
    # is there going to be a toolbox?
    # then duplicate the column where the box must be
    # so that the toolbox is not affected by "..."
    isBox=grepl("box", df[1,])
    idxBox=which(isBox==T)
    if (any(idxBox)){df$BOX=df[,idxBox];df$BOX=gsub("\\.\\.\\.","",df$BOX)}
    # // -> for conversion to via LPD IPA
    isColumnLPD=grepl("/",df[1,])
    df[-1,isColumnLPD]=sapply(df[-1,isColumnLPD], function (x) gsub("^(.*)$","/\\1/", x))
    # [] -> for conversion to IPA
    isColumnIPA=grepl("\\[|\\]",df[1,])
    df[-1,isColumnIPA]=sapply(df[-1,isColumnIPA], function (x) gsub("^(.*)$","[\\1]", x))
    # ... -> for dotfills
    isColumnDOT=grepl("\\.\\.\\.", df[1,])
    df[-1,isColumnDOT]=sapply(df[-1,isColumnDOT], function (x) gsub("^(.*)$","...\\1", x))
    df[1,]=sapply(df[1,], function (x) gsub("\\[|\\{|\\]|\\}|\\.\\.\\.","",x))
    # _xx_ -> for italics
    isColumnItalics=grepl(" _|_ ",df[1,])
    df[-1,isColumnItalics]=sapply(df[-1,isColumnItalics], function (x) gsub("^(.*)$","_\\1_", x))
    # __xx__ -> for bold
    isColumnBold=grepl(" _|_ ",df[1,])
    df[-1,isColumnBold]=sapply(df[-1,isColumnBold], function (x) gsub("^(.*)$","__\\1__", x))
    # mostly tables need to keep their headers
    #     cleanHeader=gsub("[^[:alnum:]]|(\\(.*\\))|box|header|NA", "\\1", df[1,])
    cleanHeader=gsub("box|header|NA", "", df[1,])
    #     testheader=gsub("header|NA ","", test)
    if(!any(grepl("[[:alpha:]]",cleanHeader))){
      #       print("yo")
      df=df[-1,]
    }
  }
df
df
    tmpdf=apply(as.data.frame(df),c(1,2),returnCleanCell)
tmpdf
correction
df
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv")
df
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv")
df
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904-duolingo-demo.csv")
df
df
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904b-duolingo-demo.csv")
df1=df
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/904-duolingo-demo.csv")
df2=df
df1
df2
  cat("\n\n### {.center}\n\n")
  if (ncol(df)>1){
  cat(paste0("*",df[1,1],"* `(",df[1,2]," pts)`\n\n"))
  } else {
  cat(paste0("*",df[1,1],"*")
  }
}
  if (ncol(df)>1){
  cat(paste0("*",df[1,1],"* `(",df[1,2]," pts)`\n\n"))
  } else {
  cat(paste0("*",df[1,1],"*")
  }
}
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/images/")
GlobalOuput="revealjs"
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/images/")
source('/home/adrien/core/scripts/r/AllFunctions.R')
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/images/")
GlobalOutput="revealjs"
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/images/")
GlobalPath
path=GlobalPath
  images <- list.files(path=path,pattern = "jpg|png")
  meanings <- strsplit(images,"[.]")
  meanings <- sapply(meanings,"[[",1)
  meanings <- gsub("-"," ",meanings)
  origmeanings <- meanings
  origimages <- images
  meanings <- sample(meanings)
  images <- sample(images)
images
meanings
images
sapply(images,function (x) paste0(path,x))
  images=sapply(images, function(x) paste0(path, x))
images
df
df1
df1[sample(nrow(df1)),]
  df=cbind(images, meanings)
df
  images <- list.files(path=path,pattern = "jpg|png")
  meanings <- strsplit(images,"[.]")
  meanings <- sapply(meanings,"[[",1)
  meanings <- gsub("-"," ",meanings)
  images=sapply(images, function(x) paste0(path, x))
  df=cbind(images, meanings)
df
df
  df=df[sample(nrow(df)),]
  for (j in 1:nrow(df)){
    cat("\n\n### {.center}\n\n")
    cat(paste0("![](", df[j,1], "){width=\"20%\"}"))
    cat(paste0("\n\n::: {.fragment fragment-index=",j,"}\n\n"))
    cat("[• ",df[j,2], "]{.corrected}\n\n")
    cat(":::\n")
  }
GlobalOutput
GlobalOutput="latex"
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/images/")
df
      cat(paste0("\\includegraphics[max height=4cm, max width=0.8\\linewidth, keepaspectratio=true]{", images[j], "}\n\n"))
      cat(paste0("\\textit{\\textbf{",meanings[j],"}}\n\n")
),"\n\n\\end{minipage}\n\n",sep="\n"))
    } else {
      cat(paste("\\item \\begin{minipage}[t]{\\linewidth} \\raggedright \\adjustbox{valign=t}{\\includegraphics[max size={0.8\\linewidth}{4cm}, keepaspectratio=true]{",
      cat(paste0("\\textit{\\textbf{",meanings[j],"}}\n\n"))
      cat(paste0("\\textit{\\textbf{",meanings[j],"}}\n\n"))
returnCorrectedCell(meanings[2])
      cat(returnCorrectedCell(meanings[j]),"\n\n")
GlobalOutput
UniversalDispatcher("/home/adrien/github/UniversalDispatchR/pdfdata/919-transformation-demo.csv")
df
    df = read.csv(path,sep=';', check.names = F, header = F)
path
GlobalPath
path=GlobalPath
    df = read.csv(path,sep=';', check.names = F, header = F)
    df[is.na(df)] <- ""
    df <- do.call(sprintf("prepare%s", exerciseFound),list(df))
df
    df=addheader(df, exerciseFound)
df
quit(save = "yes")
